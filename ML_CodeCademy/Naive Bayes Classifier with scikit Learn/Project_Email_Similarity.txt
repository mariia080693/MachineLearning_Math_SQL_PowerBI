from sklearn.datasets import fetch_20newsgroups
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer

emails = fetch_20newsgroups()

print(emails.target_names, '\n')

#print(emails.data[5]); 
#print(emails.target, '\n');
#print(emails.target_names[emails.target[5]])

train_emails = fetch_20newsgroups(categories = ['rec.sport.baseball', 'rec.sport.hockey'], subset = 'train', shuffle = True, random_state = 108)

test_emails = fetch_20newsgroups(categories = ['rec.sport.baseball', 'rec.sport.hockey'], subset = 'test', shuffle = True, random_state = 108)

counter = CountVectorizer() # to transform data into count of words
counter.fit(test_emails.data + train_emails.data) # to fit all data we have

train_counts = counter.transform(train_emails.data) # list of counts of the words
test_counts = counter.transform(test_emails.data)

### IMPORTANT
print(counter.get_feature_names()) # all the words from the fitting data
print(train_counts.toarray(), '\n') # corresponding matrices to the train emails
print(train_counts.toarray()[0], '\n') # vector corresponding to the 1st email
print(train_emails.target)
###

classifier = MultinomialNB() # to make a Naive Bayes classifier
classifier.fit(train_counts, train_emails.target) # training set and labels

print(classifier.score(test_counts, test_emails.target)) # proportion of correctly classified emails



