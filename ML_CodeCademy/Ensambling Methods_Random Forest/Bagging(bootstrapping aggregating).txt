import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.metrics import accuracy_score

df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data', names=['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety', 'accep'])
df['accep'] = ~(df['accep']=='unacc') #1 is acceptable, 0 if not acceptable
X = pd.get_dummies(df.iloc[:,0:6], drop_first=True)
y = df['accep']
x_train, x_test, y_train, y_test = train_test_split(X,y, random_state=0, test_size=0.25)

#1.Decision tree trained on  training set
dt = DecisionTreeClassifier(max_depth = 5)
dt.fit(x_train,y_train) 
print(f'Accuracy score of DT on test set (trained using full set): {dt.score(x_test, y_test).round(4)}')

#2. New decision tree trained on bootstrapped sample
dt2 = DecisionTreeClassifier(max_depth=5)
#ids are the indices of the bootstrapped sample
ids = x_train.sample(x_train.shape[0], replace=True, random_state=0).index
dt2 = DecisionTreeClassifier(max_depth=5, random_state=0)
dt2.fit(x_train.loc[ids], y_train.loc[ids])
print(f'Accuracy score of DT on test set (trained using bootstrapped sample): {dt2.score(x_test, y_test).round(4)}')

## 3. Bootstapping ten samples and aggregating the results:
preds = []
random_state = 0
#Write for loop:
for i in range(10):
    # Generate bootstrapped sample indices
    boot_indices = x_train.sample(n=x_train.shape[0], replace=True, random_state=i).index
    
    # Train a Decision Tree on the bootstrapped sample
    tree = DecisionTreeClassifier(max_depth=5, random_state=i)
    tree.fit(x_train.loc[boot_indices], y_train.loc[boot_indices])
    
    # Predict on the test set and store in preds list
    y_pred = tree.predict(x_test)
    preds.append(y_pred)

# Convert preds list to a NumPy array for averaging
preds = np.array(preds)

# Take the average across all predictions
ba_pred = np.mean(preds, axis=0)
ba_pred = np.array(preds).mean(0)

# 4. Calculate accuracy of the bagged sample
ba_pred_binary = (ba_pred >= 0.5).astype(int)
ba_accuracy = accuracy_score(y_test, ba_pred_binary)
print(f'Accuracy score of aggregated 10 bootstrapped samples:{ba_accuracy.round(4)}')



